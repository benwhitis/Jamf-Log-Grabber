#!/bin/bash

#Deprecated in favor of Log Grabber 2.0 as of 8/5/23


# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#        * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#      * Redistributions in binary form must reproduce the above copyright
#           notice, this list of conditions and the following disclaimer in the
#           documentation and/or other materials provided with the distribution.
#         * Neither the name of the JAMF Software, LLC nor the
#           names of its contributors may be used to endorse or promote products
#           derived from this software without specific prior written permission.
# THIS SOFTWARE IS PROVIDED BY JAMF SOFTWARE, LLC "AS IS" AND ANY
# EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL JAMF SOFTWARE, LLC BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#JLG but make it just Jamf Connect


#define variables
log_folder=$HOME/Desktop/Logs
not_found=$HOME/Desktop/Logs/Results/
results=$not_found/Results.txt
connect=$log_folder/Connect
currenttime=$(date +"%D %T")

#clear out previous results
if [ -e $log_folder ] ;then rm -r $log_folder
fi

#create a folder to save all logs
mkdir -p $log_folder/{Results,Connect,}

#create a log file for script and save to Not_Found directory so users can see what logs were not gathered
touch $results
echo "Jamf Connect Log Grabber ran on $currenttime" >>$results

#outputs all historical Jamf connect logs
log show --style compact --predicate 'subsystem == "com.jamf.connect"' --debug > $connect/JamfConnect.log

#outputs all historical Jamf connect login logs
log show --style compact --predicate 'subsystem == "com.jamf.connect.login"' --debug > $connect/jamfconnect.login.log

#check for jamf login logs and plist, copy, and convert to readable format
if [ -e /tmp/jamf_login.log ]; then cp "/tmp/jamf_login.log" $connect/jamf_login_tmp.log
else
	echo "Jamf Login /tmp file not found" >> $results
fi

if [ -e /Library/Managed\ Preferences/com.jamf.connect.login.plist ]; then cp "/Library/Managed Preferences/com.jamf.connect.login.plist" "$connect/com.jamf.connect.login_managed.plist" | plutil -convert xml1 "$connect/com.jamf.connect.login_managed.plist" | log show --style compact --predicate 'subsystem == "com.jamf.connect.login"' --debug > "$connect/com.jamf.connect.login.log"
else
	echo "Jamf Connect Login plist not found" >> $results
fi

#check for jamf connect license, copy, decrypt, and convert to readable format
LicensefromLogin=$(defaults read /Library/Managed\ Preferences/com.jamf.connect.login.plist LicenseFile 2>/dev/null)
LicensefromMenubar=$(defaults read /Library/Managed\ Preferences/com.jamf.connect.plist LicenseFile 2>/dev/null)
if [[ "$LicensefromLogin" == "PD94"* ]]; then
	(echo "$LicensefromLogin" | base64 -d) > $connect/license.txt
elif [[ "$LicensefromMenubar" == "PD94"* ]]; then
	(echo "$LicensefromMenubar" | base64 -d) > $connect/license.txt
else
	file=""
fi

#check for jamf connect state plist, copy, and convert to readable format
State_plist=$(defaults read com.jamf.connect.state.plist 2>/dev/null)
if [[ "$State_plist" == "" ]]; then
	echo "A Jamf Connect State list was not found because no user is logged into Menu Bar" >> $results; else cp $HOME/Library/Preferences/com.jamf.connect.state.plist "$connect/com.jamf.connect.state.plist" | plutil -convert xml1 $connect/com.jamf.connect.state.plist
	fi

#check for jamf connect menu bar plist, copy, and convert to readable format
if [ -e /Library/Managed\ Preferences/com.jamf.connect.plist ]; then cp "/Library/Managed Preferences/com.jamf.connect.plist" "$connect/com.jamf.connect_managed.plist" | plutil -convert xml1 "$connect/com.jamf.connect_managed.plist" | log show --style compact --predicate 'subsystem == "com.jamf.connect"' --debug > "$connect/com.jamf.connect.log"
else
	echo "Jamf Connect plist not found" >> $results
fi

#check for kerberos ticket
kerblist=$("klist" 2>/dev/null)
if [[ "$kerblist" == "" ]];then
	echo "No Kerberos Ticket for Current Logged in User" > $connect/klist_manuallyCollected.txt; else
		echo $kerblist > $connect/klist_manuallyCollected.txt
	fi

#list authchanger settings
/usr/local/bin/authchanger -print > "$connect/authchanger_manuallyCollected.txt"

