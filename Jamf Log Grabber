#!/bin/bash

#Jamf Log Grabber is designed to collect any logs associated with Jamf Products as well as MDM Managed Preferences.
#Jamf Products currently supported: Jamf Binary (including Recon Troubleshooting), Jamf Connect, Jamf Security (Protect and Trust), App Installers, and Jamf Remote Assist
#Log Grabber 2.0 revamp started 11/18 to design a more easy to customize workflow for grabbing logs

#Arrays are now set for each individual type of log. Simply add or remove array names to call them in the script (Line 278)
#This new workflow allows for you to add arrays for additional in house apps like SUPER, DEPNOTIFY, Crowdstrike, or any other commonly used MacOS applications.

####################################################################################################

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#        * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#      * Redistributions in binary form must reproduce the above copyright
#           notice, this list of conditions and the following disclaimer in the
#           documentation and/or other materials provided with the distribution.
#         * Neither the name of the JAMF Software, LLC nor the
#           names of its contributors may be used to endorse or promote products
#           derived from this software without specific prior written permission.
# THIS SOFTWARE IS PROVIDED BY JAMF SOFTWARE, LLC "AS IS" AND ANY
# EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL JAMF SOFTWARE, LLC BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

####################################################################################################
#HARD CODED VARIABLES, DO NOT CHANGE
loggedInUser=$( echo "show State:/Users/ConsoleUser" | /usr/sbin/scutil | /usr/bin/awk '/Name :/ && ! /loginwindow/ { print $3 }' )
log_folder=$HOME/Desktop/"$loggedInUser"_logs
results=$log_folder/Results.txt
JSS=$log_folder/Client_Logs
security=$log_folder/Jamf_Security
connect=$log_folder/Connect
managed_preferences=$log_folder/Managed_Preferences
recon=$log_folder/Recon
self_service=$log_folder/Self_Service
Device_Compliance=$log_folder/Device_Compliance
JRA=$log_folder/JRA
App_Installers=$log_folder/App_Installers
jamfLog=$JSS/jamf.log

reconleftovers=$(ls /Library/Application\ Support/JAMF/tmp/ 2> /dev/null)

#DATE FOR LOG FOLDER ZIP CREATION
currentlogdate=$(date)

#DATE AND TIME FOR RESULTS.TXT INFORMATION
currenttime=$(date +"%D %T")
currenttime1=$(echo $currenttime | awk '{print $2}')

####################################################################################################
#You can add custom app log grabbing using the following rubric, just continue numbering the appnames or renaming them to fit your needs
#You can pass jamf script variables as part of a policy to get your additional apps

CustomApp1Name="$4"
CustomApp1Folder=$log_folder/$CustomApp1Name
CustomApp1LogSource="$5"
#Now go down to CustomApp1Array and put in the files you want to grab
CustomApp2Name="$6"
CustomApp2Folder=$log_folder/$CustomApp2Name
CustomApp2LogSource="$7"
#Now go down to CustomApp2Array and put in the files you want to grab
CustomApp3Name="$8"
CustomApp3Folder=$log_folder/$CustomApp3Name
CustomApp3LogSource="$9"
#Now go down to CustomApp2Array and put in the files you want to grab



####################################################################################################
#Array for Jamf Logs
Jamf() {
	mkdir -p $log_folder/Client_Logs
	#ADD JAMF CLIENT LOGS TO LOG FOLDER
	if [ -e /private/var/log/jamf.log ]; then cp "/private/var/log/jamf.log" $JSS
		grep  "Error" $JSS/jamf.log > $JSS/jamferror.log
	else
		echo -e "Jamf Client Logs not found\n" >> $results
	fi
	#CHECK FOR JAMF INSTALL LOGS
	if [ -e /var/log/install.log ]; then cp "/var/log/install.log" $JSS 
	else
		echo -e "Install Logs not found\n" >> $results
	fi
	#CHECK FOR JAMF SYSTEM LOGS
	if [ -e /var/log/system.log ]; then cp "/var/log/system.log" $JSS
	else
		echo -e "System Logs not found\n" >> $results
	fi
	#FIND AND COPY JAMF SOFTWARE PLIST, THEN COPY AND CONVERT TO A READABLE FORMAT
	#COPY DEBUG LOG
	if [ -e /Library/Preferences/com.jamfsoftware.jamf.plist ]; then cp "/Library/Preferences/com.jamfsoftware.jamf.plist" "$JSS/com.jamfsoftware.jamf.plist" | plutil -convert xml1 "$JSS/com.jamfsoftware.jamf.plist" 
	else
		echo -e "Jamf Software plist not found\n" >> $results
	fi
	mkdir -p $log_folder/Self_Service
	#check for jamf self service logs
	if [ -e /$HOME/Library/Logs/JAMF ]; then cp -r "$HOME/Library/Logs/JAMF/" $self_service
	else
		echo -e "Jamf Self Service Logs not found\n" >> $results
	fi
	#Parse through all agents and deamons for any running keyword "jamf" and are not a part of standard Jamf applications. If none are found, they are still printed 
	AgentsAndDaemonsDirty=$(grep -r "jamf" ~/Library/LaunchAgents/ /Library/LaunchAgents/ /Library/LaunchDaemons/ /System/Library/LaunchAgents/ /System/Library/LaunchDaemons/)
	AgentsAndDaemonsClean=$(grep -r "jamf" /Users/$loggedInUser/Library/LaunchAgents/ /Library/LaunchAgents/ /Library/LaunchDaemons/ /System/Library/LaunchAgents/ /System/Library/LaunchDaemons/ | grep -vw "com.jamf.connect.plist" | grep -vw "com.jamf.connect.login.plist" | grep -vw "com.jamf.connect.unlock.login.plist" | grep -vw "com.jamf.management.agent.plist" | grep -vw "com.jamf.connect.daemon.plist" | grep -vw "com.jamf.management.daemon.plist" | grep -vw "com.jamfsoftware.Composer.helper.plist" | grep -vw "com.jamfsoftware.task.1.plist" | grep -vw "com.jamf.cloudmonitor.plist" | grep -vw "com.jamf.remoteassist.connect.preloginagent.plist" | grep -vw "com.jamf.remoteassist.connect.userloginagent.plist" | grep -vw "com.jamf.remoteassist.connector.plist" | grep -vw "com.jamf.management.startup.plist") 
	case $AgentsAndDaemonsClean in
		"")
			echo -e "A search for custom Agents and Daemons containing 'jamf' keywords has been ran. No matches other than standard Jamf Applications were located. For thorough diagnostics a list of all Agents and Daemons containing 'jamf' keyword in Client_Logs Folder. This includes standard Jamf Applications.\n" >> $results
			echo -e "$AgentsAndDaemonsDirty" > $JSS/AgentsAndDaemons.txt
		;;
		*)
			echo -e "The following Agents or Daemons were located and contain keyword 'jamf'\n $AgentsAndDaemonsClean" >> $results
		;;
	esac
	#read blocked applications in jamf
	sudo cat /Library/Application\ Support/JAMF/.jmf_settings.json > $JSS/restricted_software.json
	#show installed profiles and output to xml. Use this to compare profile settings against actual settings in Managed Preferences Folder
	sudo profiles show -output $JSS/profiles.xml stdout-xml	
}


####################################################################################################
#Array for Jamf Connect Logs
Connect() {
	echo "Checking for Jamf Connect" >> $results
	if [ -e /Library/Managed\ Preferences/com.jamf.connect.plist ]; then
		echo "Jamf Connect installed, collecting Jamf Connect logs..." >>$results
		mkdir -p $log_folder/Connect
		#OUTPUT ALL HISTORICAL JAMF CONNECT LOGS, THIS WILL ALWAYS GENERATE A LOG FILE EVEN IF CONNECT IS NOT INSTALLED
		log show --style compact --predicate 'subsystem == "com.jamf.connect"' --debug > $connect/JamfConnect.log
		#OUTPUT ALL HISTORICAL JAMF CONNECT LOGIN LOGS
		log show --style compact --predicate 'subsystem == "com.jamf.connect.login"' --debug > $connect/jamfconnect.login.log
		kerblist=$("klist" 2>/dev/null)
		if [[ "$kerblist" == "" ]];then
			echo "-No Kerberos Ticket for Current Logged in User" > $connect/klist_manuallyCollected.txt; else
				echo $kerblist > $connect/klist_manuallyCollected.txt; 
			fi
	#CHECK FOR JAMF CONNECT LOGIN LOGS AND PLIST, THEN COPY AND CONVERT TO A READABLE FORMAT
	if [ -e /tmp/jamf_login.log ]; then cp "/tmp/jamf_login.log" $connect/jamf_login_tmp.log
	else
		echo -e "-Jamf Login /tmp file not found\n-This usually only exists on recent installs.\n-Don't worry if you don't see anything. We're just being thorough.\n" >> $results
	fi
	
	if [ -e /Library/Managed\ Preferences/com.jamf.connect.login.plist ]; then cp "/Library/Managed Preferences/com.jamf.connect.login.plist" "$connect/com.jamf.connect.login_managed.plist" | plutil -convert xml1 "$connect/com.jamf.connect.login_managed.plist" | log show --style compact --predicate 'subsystem == "com.jamf.connect.login"' --debug > "$connect/com.jamf.connect.login.log"
	else
		echo -e "-Jamf Connect Login plist not found\n" >> $results
	fi
	
	#CHECK FOR JAMF CONNECT LICENSE, THEN COPY AND CONVERT TO A READABLE FORMAT
	LicensefromLogin=$(defaults read /Library/Managed\ Preferences/com.jamf.connect.login.plist LicenseFile 2>/dev/null)
	LicensefromMenubar=$(defaults read /Library/Managed\ Preferences/com.jamf.connect.plist LicenseFile 2>/dev/null)
	if [[ "$LicensefromLogin" == "PD94"* ]]; then
		(echo "$LicensefromLogin" | base64 -d) > $connect/license.txt
	elif [[ "$LicensefromMenubar" == "PD94"* ]]; then
		(echo "$LicensefromMenubar" | base64 -d) > $connect/license.txt
	else
		file=""
	fi
	
	#CHECK FOR JAMF CONNECT STATE PLIST, THEN COPY AND CONVERT TO A READABLE FORMAT
	State_plist=$(defaults read /Users/$loggedInUser/Library/Preferences/com.jamf.connect.state.plist 2>/dev/null)
	if [[ "$State_plist" == "" ]]; then
		echo -e "-A Jamf Connect State list was not found because no user is logged into Menu Bar\n" >> $results; 
	else cp $HOME/Library/Preferences/com.jamf.connect.state.plist "$connect/com.jamf.connect.state.plist" | plutil -convert xml1 $connect/com.jamf.connect.state.plist
	fi
	
	#CHECK FOR JAMF CONNECT MENU BAR PLIST, THEN COPY AND CONVERT TO A READABLE FORMAT
	if [ -e /Library/Managed\ Preferences/com.jamf.connect.plist ]; then cp "/Library/Managed Preferences/com.jamf.connect.plist" "$connect/com.jamf.connect_managed.plist" | plutil -convert xml1 "$connect/com.jamf.connect_managed.plist" | log show --style compact --predicate 'subsystem == "com.jamf.connect"' --debug > "$connect/com.jamf.connect.log"
	else
		echo -e "Jamf Connect plist not found\n" >> $results
	fi
	
	#LIST AUTHCHANGER SETTIGNS
	if [ -e /usr/local/bin/authchanger ]; then
		/usr/local/bin/authchanger -print > "$connect/authchanger_manuallyCollected.txt"
		:
	else
		echo -e "-No Authchanger settings found\n" >> $results
	fi
	else
		echo -e "-No Jamf Connect Installed, doing nothing\n" >> $results
	fi
	#CHECK THE JAMF CONNECT LICENSE FILE AND LOOK FOR OTHER PROFILES THAT MAY HAVE A JAMF CONNECT LICENSE
	connectLicenseInstalled=$(defaults read $managed_preferences/com.jamf.connect.plist LicenseFile)
	connectLoginLicenseInstalled=$(defaults read /Users/zach.propheter/Desktop/zach.propheter_logs/Managed_Preferences/zach.propheter/com.jamf.connect.login.plist LicenseFile)
	profilesWithConnectLicense=$(grep -A 1 "LicenseFile" $JSS/profiles.xml | awk -F'<string>' '{print $2}' | sed 's/string>//g' | sed 's/<.*//;/^$/d')
	connectLicenseExpiration=$(grep -A 1 "ExpirationDate" $connect/license.txt | awk '{ print $1 }' | sed 's/<string>//g' | sed 's/<.*//;/^$/d' | tr -d "-")
	connectDateCompare=$(date +%Y%m%d)
	
	#REPORT JAMF CONNECT PRIVILEGE ELEVATION LOGS
	log show --style compact --predicate '(subsystem == "com.jamf.connect.daemon") && (category == "PrivilegeElevation")' >> $connect/Connect_Daemon_Elevation_Logs.txt
	log show --style compact --predicate '(subsystem == "com.jamf.connect") && (category == "PrivilegeElevation")' >> $connect/Connect_Menubar_Elevation_Logs.txt
	
	connectLicenseArray() {
		for i in $profilesWithConnectLicense; do
			if [[ "$i" == $connectLicenseInstalled ]]; then
				echo -e "-Matching Profile found for installed Connect License (com.jamf.connect)." >> $results
				if [ $connectDateCompare -ge $connectLicenseExpiration ]; then
					echo "-Currently installed Jamf Connect License is expired" >> $results
				else
					echo "-Currently installed Jamf Connect License is valid" >> $results
				fi
			else
				echo -e "-Mismatch between installed Connect license found in com.jamf.connect plist and an installed profile. Search the profiles.xml file for this license string to see which one profile is attempting to install this license string:\n $i\n " >> $results
			fi
		done
	}
	
	connectLoginLicenseArray() {
		for i in $profilesWithConnectLicense; do
			if [[ "$i" == $connectLoginLicenseInstalled ]]; then
				echo -e "-Matching Profile found for installed Connect License (com.jamf.connect.login)." >> $results
				if [ $connectDateCompare -ge $connectLicenseExpiration ]; then
					echo "-Currently installed Jamf Connect License is expired" >> $results
				else
					echo "-Currently installed Jamf Connect License is valid" >> $results
				fi
			else
				echo -e "-Mismatch between installed Connect license found in com.jamf.connect.login plist and an installed profile. Search the profiles.xml file for this license string to see which one profile is attempting to install this license string:\n $i\n " >> $results
			fi
		done
	}
	
	if [[ "$connectLicenseInstalled" != "" ]]; then
		connectLicenseArray 
	else
		connectLoginLicenseArray 
	fi
}


####################################################################################################
#Array for Jamf Protect Logs
Protect() {
	#MAKE DIRECTORY FOR ALL JAMF SECURITY RELATED FILES
	mkdir -p $log_folder/Jamf_Security
	#CHECK FOR JAMF PROTECT PLIST, THEN COPY AND CONVERT TO READABLE FORMAT
	if [ -e /Library/Managed\ Preferences/com.jamf.protect.plist ]; then cp "/Library/Managed Preferences/com.jamf.protect.plist" "$security/com.jamf.protect.plist"
		plutil -convert xml1 "$security/com.jamf.protect.plist"
		protectctl info > $security/jamfprotectinfo.log
	else
		echo -e "Jamf Protect plist not found\n" >> $results
	fi
	#CHECK FOR JAMF TRUST PLIST, THEN COPY AND CONVERT TO READABLE FORMAT
	if [ -e /Library/Managed\ Preferences/com.jamf.trust.plist ]; then cp "/Library/Managed Preferences/com.jamf.trust.plist" "$security/com.jamf.trust.plist" 
		plutil -convert xml1 "$security/com.jamf.trust.plist"
	else
		echo -e "Jamf Trust plist not found\n" >> $results
	fi
}

####################################################################################################
#Array for Recon Troubleshoot
Recon_Troubleshoot() {
	mkdir -p $log_folder/Recon
	#check for Jamf Recon leftovers
	if [[ $reconleftovers == "" ]]; then
		:
	else
		echo $reconleftovers > $recon/Leftovers.txt
		#DIAGNOSTIC INFORMATION FOR RECON RESULTS. FOLLOWING THESE STEPS WILL HELP IDENTIFY PROBLEMATIC EXTENSION ATTRIBUTES AND/OR INVENTORY CHECK IN PROBLEMS
		echo -e "\nRecon leftovers found and listed above\nTo remediate, take the following steps:\n1. Open the other files in this folder\n2.Find the Extension Attribute that matches the script in this file\n3.Remove or remediate the associate Extension Attribute Script\n4.Confirm by running a 'Sudo Jamf Recon' and verifying the files do not return.\n" >> $recon/Leftovers.txt
		#REPORT IN RESULTS FILE THAT LEFTOVERS WERE FOUND
		echo -e "\nRecon Troubleshoot found files in the /tmp directory that should not be there. A report of these files as well as next actions can be found in the Leftovers.txt file in the Recon Directory.\n" >> $results
		#copy all files in tmp folder to recon results folder
			cp -r /Library/Application\ Support/Jamf/tmp/ $recon/
		timefound=`grep -E -i '[0-9]+:[0-9]+' ${jamfLog} | awk '{print $4}' | tail -1`
		echo $timefound > /dev/null
		timeFoundNoSeconds=$(echo "${timefound:0:5}${timefound:8:3}")
		currentTimeNoSeconds=$(echo "${currenttime1:0:5}${currenttime1:8:3}")
		echo $timeFoundNoSeconds > /dev/null
		echo $currentTimeNoSeconds > /dev/null
		if [[ "$timeFoundNoSeconds" == "$currentTimeNoSeconds" ]]; then
			echo -e "JLG appears to be running via policy, results in Recon directory may be inaccurate as files are stored there while policies are running\n" >> $results
		else
			echo -e "JLG appears to have been manually run. Results in Recon directory should be examined closely.\n" >> $results
		fi
	fi
}
####################################################################################################
#Array for MDM Communication Check
#IF A DEVICE IS NOT COMMUNICATING WITH MDM, THIS WILL GIVE ITEMS TO LOOK INTO
MDMCommunicationCheck() {
	touch $log_folder/MDMCheck.txt
	#WRITE TO LOGS WHAT WE ARE DOING NEXT
	echo -e "Checking $loggedInUser's computer for MDM communication issues:" >> $log_folder/MDMCheck.txt
	#CHECK MDM STATUS AND ADVISE IF IT IS COMMUNICATING
	result=$(log show --style compact --predicate '(process CONTAINS "mdmclient")' --last 1d | grep "Unable to create MDM identity")
	if [[ $result == '' ]]; then
		echo -e "-MDM is communicating" >> $log_folder/MDMCheck.txt
	else
		echo -e "-MDM is broken" >> $log_folder/MDMCheck.txt
	fi
	#CHECK FOR THE MDM PROFILE TO BE INSTALLED
	mdmProfile=$(/usr/libexec/mdmclient QueryInstalledProfiles | grep "00000000-0000-0000-A000-4A414D460003")
	if [[ $mdmProfile == "" ]]; then
		echo -e "-MDM Profile Not Installed" >> $log_folder/MDMCheck.txt
	else
		echo -e "-MDM Profile Installed" >> $log_folder/MDMCheck.txt
	fi
	#TELL THE STATUS OF THE MDM DAEMON
	mdmDaemonStatus=$(/System/Library/PrivateFrameworks/ApplePushService.framework/apsctl status | grep -A 18 com.apple.aps.mdmclient.daemon.push.production | awk -F':' '/persistent connection status/ {print $NF}' | sed 's/^ *//g')
	echo -e "-The MDM Daemon Status is:$mdmDaemonStatus" >> $log_folder/MDMCheck.txt
	#WRITE THE APNS TOPIC TO THE RESULTS FILE IF IT EXISTS
	profileTopic=$(system_profiler SPConfigurationProfileDataType | grep "Topic" | awk -F '"' '{ print $2 }');
	if [ "$profileTopic" != "" ]; then
		echo -e "-APNS Topic is: $profileTopic\n" >> $log_folder/MDMCheck.txt
	else
		echo -e "-No APNS Topic Found\n" >> $log_folder/MDMCheck.txt
	fi
}
####################################################################################################
#Array for Managed Preferences Collection
Managed_Preferences_Array() {
	#mkdir -p $log_folder/Managed\ Preferences
	#CHECK FOR MANAGED PREFERENCE PLISTS, THEN COPY AND CONVERT THEM TO A READABLE FORMAT
	if [ -e /Library/Managed\ Preferences/ ]; then cp -r /Library/Managed\ Preferences $managed_preferences
		#SLEEP TO ALLOW COPY TO FINISH PROCESSING ALL FILES
		sleep 5
		#UNABLE TO CHECK FOLDER FOR WILDCARD PLIST LIKE *.PLIST
		plutil -convert xml1 $managed_preferences/*.plist
		plutil -convert xml1 $managed_preferences/$loggedInUser/*.plist
	else
		echo -e "No Managed Preferences plist files found\n" >> $results
	fi
}

####################################################################################################
#Array for Device Compliance
DeviceCompliance() {
	mkdir -p $log_folder/Device_Compliance
	log show --predicate 'subsystem CONTAINS "jamfAAD" OR subsystem BEGINSWITH "com.apple.AppSSO"' > $Device_Compliance/JamfConditionalAccess.log
	if [ -e /Library/Logs/Microsoft/Intune/ ]; then cp /Library/Logs/Microsoft/Intune/*.log $Device_Compliance
	else
		echo -e "Device Compliance system logs not found.\n" >> $results
	fi
	if [ -e /$loggedInUser/Logs/Microsoft/Intune/ ]; then cp /Library/Logs/Microsoft/Intune/*.log $Device_Compliance
	else
		echo -e "Device Compliance user logs not found.\n" >> $results
	fi
	
}

####################################################################################################
#Array for Device Compliance
Remote_Assist() {
	#ADD JAMF Remote Assist Log Folder
	mkdir -p $JRA/Remote_Assist_Logs
	if [ -e /Users/Shared/jamfdata ]; then cp -r "/Users/Shared/jamfdata" $JRA/Remote_Assist_Logs
		touch $JRA/Info.txt
		successfulFileDownloads=$(grep -R "File:" /Users/Shared/jamfdata/log/Connect/DragSimulator/ | awk '/Transfer Successful!/' | sed 's/^.*File://' | sed 's/Transfer Successful!//g')
		if [[ $successfulFileDownloads == "" ]]; then 
			echo "No File Transfers found from most recent session" >> $JRA/Info.txt
		else
			echo -e "The files most recently downloaded from Jamf Remote Assist are: $successfulFileDownloads" >> $JRA/Info.txt
		fi
		lastremote=$(grep -r "grapplemdm::ipc::tcp::TcpConnector::Connect(ipc::ListenerIdentifier::Ref) connected to 127.0.0.1:" /Users/Shared/jamfdata/log/Connect/ | sed 's/^.*log://' | awk '{print $1}')
		if [[ $lastremote == "" ]]; then 
			echo "No Remote Sessions have been launched by Jamf Remote Assist on this device or the logs have been manually cleared." >> $JRA/Info.txt
		else
			echo "Last Jamf Remote Assist session listed below:" >> $JRA/Info.txt
			echo ${lastremote:1} | awk '{print $1}' >> $JRA/Info.txt
		fi		
	else
		echo -e "Jamf Remote Assist logs not found. Only available on Jamf Pro 11.1.0 and up.\n" >> $results
	fi
}

####################################################################################################
#Array for App Installers Directory
#When done, remove the associated array comment/# inside the Case command inside the logGrabberMasterArray
AppInstallers() {
	mkdir -p $App_Installers
	if [ -e /var/db/ConfigurationProfiles/Settings/Managed\ Applications/Device/ ]; then cp -r /var/db/ConfigurationProfiles/Settings/Managed\ Applications/Device/ directory $App_Installers
	else
		echo -e "App Installer Directory not found, device is not in scope for any App Installers or is not receiving the App Installer command from Jamf.\n" >> $results
	fi
}

####################################################################################################
#Array for App Named in Dynamic Variables
#When done, remove the associated array comment/# inside the Case command inside the logGrabberMasterArray
CustomApp1Array() {
	mkdir -p $log_folder/$CustomApp1Name
	if [ -e $CustomApp1LogSource ]; then cp $CustomApp1LogSource $CustomApp1Folder
	else
		echo -e "$CustomApp1Name does not have a log file available to grab.\n" >> $results
	fi
}

####################################################################################################
#Array for App Named in Dynamic Variables
#When done, remove the associated array comment/# inside the Case command inside the logGrabberMasterArray
CustomApp2Array() {
	mkdir -p $log_folder/$CustomApp2Name
	if [ -e $CustomApp2LogSource ]; then cp $CustomApp2LogSource $CustomApp2Folder
	else
		echo -e "$CustomApp2Name does not have a log file available to grab.\n" >> $results
	fi
}

####################################################################################################
#Array for App Named in Dynamic Variables
#When done, remove the associated array comment/# inside the Case command inside the logGrabberMasterArray
CustomApp3Array() {
	mkdir -p $log_folder/$CustomApp3Name
	if [ -e $CustomApp3LogSource ]; then cp $CustomApp3LogSource $CustomApp3Folder
	else
		echo -e "$CustomApp3Name does not have a log file available to grab.\n" >> $results
	fi
}

####################################################################################################

#Array for folder cleanup
Cleanup() {
	#IF A VARIABLE ABOVE IS SET TO 'FALSE', REMOVE THE FOLDER NAME FOR IT BELOW TO AVOID ERRORS WITH THE CLEANUP FUNCTION AT THE END OF THE SCRIPT
	cleanup=("Client_Logs Recon Self_Service Connect Jamf_Security Managed_Preferences Device_Compliance JRA App_Installers $CustomApp1Name $CustomApp2Name $CustomApp3Name")
	#CLEANS OUT EMPTY FOLDERS TO AVOID CONFUSION
	echo "The following folders contained no files and were removed:" >> $results
	for emptyfolder in $cleanup
	do	
		if [ -z "$(ls -A /$log_folder/$emptyfolder)" ]; then
			echo -e "-$emptyfolder" >>$results 
			rm -r $log_folder/$emptyfolder
		else
			:
		fi
	done
	echo -e "\nCompleted Log Grabber on '$currenttime'\n" >> $results
}

####################################################################################################
Zip_Folder() {
	cd $HOME/Desktop
	#NAME ZIPPED FOLDER WITH LOGGED IN USER
	zip "$loggedInUser"_logs.zip -r "$loggedInUser"_logs
	rm -r $log_folder
}
####################################################################################################
# Set the Arrays you want to grab.
# Default Array is logsToGrab=("Jamf" "Managed_Preferences" "Protect" "Connect" "Recon_Troubleshoot" "MDM_Communication_Check"  "Device_Compliance" "Remote_Assist" "App_Installers" "$CustomApp1Name" "$CustomApp2Name" "$CustomApp3Name")

declare -a logsToGrab=("Jamf" "Managed_Preferences" "Protect" "Connect" "Recon_Troubleshoot" "MDM_Communication_Check"  "Device_Compliance" "Remote_Assist" "App_Installers" "$CustomApp1Name" "$CustomApp2Name" "$CustomApp3Name")

####################################################################################################
# Put it all together in the Master Array

logGrabberMasterArray() {
	#CLEAR OUT PREVIOUS RESULTS
	if [ -e $log_folder ] ;then rm -r $log_folder
	fi
	#CREATE A FOLDER TO SAVE ALL LOGS
	mkdir -p $log_folder
	#CREATE A LOG FILE FOR SCRIPT AND SAVE TO LOGS DIRECTORY SO ADMINS CAN SEE WHAT LOGS WERE NOT GATHERED
	touch $results
	#SET A TIME AND DATE STAMP FOR WHEN THE LOG GRABBER WAS RAN
	echo -e "Log Grabber was started at '$currenttime'\n" >> $results
	## now loop through the above array
	for logs in "${logsToGrab[@]}"
	do
		echo "$logs"
		case $logs in
			Jamf)
				Jamf 
			;;
			Protect)
				Protect 
			;;
			Connect)
				Connect 
			;;
			Recon_Troubleshoot)
				Recon_Troubleshoot 
			;;
			MDM_Communication_Check)
				MDMCommunicationCheck 
			;;
			Managed_Preferences)
				Managed_Preferences_Array 
			;;
			Device_Compliance)
				DeviceCompliance 
			;;
			Remote_Assist)
				Remote_Assist  
			;;
			App_Installers)
				AppInstallers 
			;;
			"$CustomApp1Name")
				#Add or Remove comment from line below to disable or enable the array for the custom app
				#CustomApp1Array  
			;;
			"$CustomApp2Name")
				#Add or Remove comment from line below to disable or enable the array for the custom app
				#CustomApp2Array  
			;;
			"$CustomApp3Name")
				#Add or Remove comment from line below to disable or enable the array for the custom app
				#CustomApp3Array  
			;;
			*)
				echo "$logs is an invalid variable for the array. Check your spelling or add it to the case argument with your own array" >> $results
			;;
		esac
	done
	
}

#Runs the Log Grabber as configured
logGrabberMasterArray 
#Run cleanup Array to remove empty folders
Cleanup
#Zips Results- Comment out or remove the line below to leave the folder unzipped
Zip_Folder 

#incorporate more log show commands for Jamf binary
#log show --style compact --predicate 'subsystem == "com.jamf.management.daemon"' --debug > ~/Desktop/test.txt
#log show --predicate "process CONTAINS 'mdmclient'"
