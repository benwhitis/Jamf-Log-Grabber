#!/bin/bash

#Jamf Log Grabber is designed to collect any logs associated with Jamf Products as well as MDM Managed Preferences. It features start and finish notifications for end users to be notified if desired
#Jamf Products currently supported: Jamf Binary (including Recon Troubleshooting), Jamf Connect, Jamf Security (Protect and Trust) 
#Log Grabber 2.0 revamp started 11/18 to design a more easy to customize workflow for grabbing logs

#Arrays are now set for each individual type of log. Simply add or remove array names to call them in the script (Line 278)
#This new workflow allows for you to add arrays for additional in house apps like SUPER, DEPNOTIFY, Crowdstrike, or any other commonly used MacOS applications.

####################################################################################################

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#        * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#      * Redistributions in binary form must reproduce the above copyright
#           notice, this list of conditions and the following disclaimer in the
#           documentation and/or other materials provided with the distribution.
#         * Neither the name of the JAMF Software, LLC nor the
#           names of its contributors may be used to endorse or promote products
#           derived from this software without specific prior written permission.
# THIS SOFTWARE IS PROVIDED BY JAMF SOFTWARE, LLC "AS IS" AND ANY
# EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL JAMF SOFTWARE, LLC BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

####################################################################################################
#HARD CODED VARIABLES, DO NOT CHANGE
log_folder=$HOME/Desktop/Logs
results=$log_folder/Results.txt
JSS=$log_folder/JSS
security=$log_folder/Jamf_Security
connect=$log_folder/Connect
managed_preferences=$log_folder/Managed_Preferences
recon=$log_folder/Recon
self_service=$log_folder/Self_Service
Device_Compliance=$log_folder/Device_Compliance
JRA=$log_folder/JRA
loggedInUser=$( echo "show State:/Users/ConsoleUser" | /usr/sbin/scutil | /usr/bin/awk '/Name :/ && ! /loginwindow/ { print $3 }' )
reconleftovers=$(ls /Library/Application\ Support/JAMF/tmp/ 2> /dev/null)

#DATE FOR LOG FOLDER ZIP CREATION
currentlogdate=$(date)

#DATE AND TIME FOR RESULTS.TXT INFORMATION
currenttime=$(date +"%D %T")

####################################################################################################
#You can add custom app log grabbing using the following rubric, just continue numbering the appnames or renaming them to fit your needs
#You can pass jamf script variables as part of a policy to get your additional apps

CustomApp1Name="$4"
CustomApp1Folder=$log_folder/$CustomApp1Name
CustomApp1LogSource="$5"
#Now go down to CustomApp1Array and put in the files you want to grab
CustomApp2Name="$6"
CustomApp2Folder=$log_folder/$CustomApp2Name
CustomApp2LogSource="$7"
#Now go down to CustomApp2Array and put in the files you want to grab
CustomApp3Name="$8"
CustomApp3Folder=$log_folder/$CustomApp3Name
CustomApp3LogSource="$9"
#Now go down to CustomApp2Array and put in the files you want to grab



####################################################################################################
#Array for Jamf Logs
Jamf() {
	mkdir -p $log_folder/JSS
	#FIND AND COPY THE JAMF SOFTWARE PLIST THEN CONVERT IT TO A READABLE FORMAT.
	#COPY DEBUG LOG
	if [ -e /Users/$loggedInUser/Library/Preferences/com.jamfsoftware.jamf.plist ]; then cp "/Library/Preferences/com.jamfsoftware.jamf.plist" "$JSS/com.jamfsoftware.jamf.plist" | plutil -convert xml1 "$JSS/com.jamfsoftware.jamf.plist" | log show --style compact --predicate 'subsystem == "com.jamfsoftware.jamf"' --debug > "$JSS/Jamfsoftware.log"
	else
		echo -e "Jamf Software plist not found\n" >> $results
	fi
	#ADD JAMF CLIENT LOGS TO LOG FOLDER
	if [ -e /private/var/log/jamf.log ]; then cp "/private/var/log/jamf.log" $JSS
		echo -e "Jamf.log found on machine for information about what this reports visit this URL:\nhttps://learn.jamf.com/bundle/jamf-pro-documentation-current/page/Components_Installed_on_Managed_Computers.html\n" >> $results
	else
		echo -e "Jamf Client Logs not found\n" >> $results
	fi
	#CHECK FOR JAMF INSTALL LOGS
	if [ -e /var/log/install.log ]; then cp "/var/log/install.log" $JSS 
	else
		echo -e "Install Logs not found\n" >> $results
	fi
	#CHECK FOR JAMF SYSTEM LOGS
	if [ -e /var/log/system.log ]; then cp "/var/log/system.log" $JSS
	else
		echo -e "System Logs not found\n" >> $results
	fi
	#FIND AND COPY JAMF SOFTWARE PLIST, THEN COPY AND CONVERT TO A READABLE FORMAT
	#COPY DEBUG LOG
	if [ -e /Library/Preferences/com.jamfsoftware.jamf.plist ]; then cp "/Library/Preferences/com.jamfsoftware.jamf.plist" "$JSS/com.jamfsoftware.jamf.plist" | plutil -convert xml1 "$JSS/com.jamfsoftware.jamf.plist" | log show --style compact --predicate 'subsystem == "com.jamfsoftware.jamf"' --debug > "$JSS/Jamfsoftware.log"
	else
		echo -e "Jamf Connect Login plist not found\n" >> $results
	fi
	mkdir -p $log_folder/Self_Service
	#check for jamf self service logs
	if [ -e /$HOME/Library/Logs/JAMF ]; then cp -r "$HOME/Library/Logs/JAMF/" $self_service
	else
		echo -e "Jamf Self Service Logs not found\n" >> $results
	fi
	sudo profiles show -output $JSS/profiles.xml stdout-xml
}

####################################################################################################
#Array for Jamf Connect Logs
Connect() {
	echo "Collecting Jamf Connect logs..." >>$results
	mkdir -p $log_folder/Connect
	if [ -e /Library/Managed\ Preferences/com.jamf.connect.plist ]; then
		#OUTPUT ALL HISTORICAL JAMF CONNECT LOGS, THIS WILL ALWAYS GENERATE A LOG FILE EVEN IF CONNECT IS NOT INSTALLED
		log show --style compact --predicate 'subsystem == "com.jamf.connect"' --debug > $connect/JamfConnect.log
		#OUTPUT ALL HISTORICAL JAMF CONNECT LOGIN LOGS
		log show --style compact --predicate 'subsystem == "com.jamf.connect.login"' --debug > $connect/jamfconnect.login.log
		kerblist=$("klist" 2>/dev/null)
		if [[ "$kerblist" == "" ]];then
			echo "-No Kerberos Ticket for Current Logged in User" > $connect/klist_manuallyCollected.txt; else
				echo $kerblist > $connect/klist_manuallyCollected.txt; 
			fi
		echo -e "-No Jamf Connect Installed, doing nothing\n" >> $results
	fi
	#CHECK FOR JAMF CONNECT LOGIN LOGS AND PLIST, THEN COPY AND CONVERT TO A READABLE FORMAT
	if [ -e /tmp/jamf_login.log ]; then cp "/tmp/jamf_login.log" $connect/jamf_login_tmp.log
	else
		echo -e "-Jamf Login /tmp file not found\n-This usually only exists on recent installs.\n-Don't worry if you don't see anything. We're just being thorough.\n" >> $results
	fi
	
	if [ -e /Library/Managed\ Preferences/com.jamf.connect.login.plist ]; then cp "/Library/Managed Preferences/com.jamf.connect.login.plist" "$connect/com.jamf.connect.login_managed.plist" | plutil -convert xml1 "$connect/com.jamf.connect.login_managed.plist" | log show --style compact --predicate 'subsystem == "com.jamf.connect.login"' --debug > "$connect/com.jamf.connect.login.log"
	else
		echo -e "-Jamf Connect Login plist not found\n" >> $results
	fi
	
	#CHECK FOR JAMF CONNECT LICENSE, THEN COPY AND CONVERT TO A READABLE FORMAT
	LicensefromLogin=$(defaults read /Library/Managed\ Preferences/com.jamf.connect.login.plist LicenseFile 2>/dev/null)
	LicensefromMenubar=$(defaults read /Library/Managed\ Preferences/com.jamf.connect.plist LicenseFile 2>/dev/null)
	if [[ "$LicensefromLogin" == "PD94"* ]]; then
		(echo "$LicensefromLogin" | base64 -d) > $connect/license.txt
	elif [[ "$LicensefromMenubar" == "PD94"* ]]; then
		(echo "$LicensefromMenubar" | base64 -d) > $connect/license.txt
	else
		file=""
	fi
	
	#CHECK FOR JAMF CONNECT STATE PLIST, THEN COPY AND CONVERT TO A READABLE FORMAT
	State_plist=$(defaults read /Users/$loggedInUser/Library/Preferences/com.jamf.connect.state.plist 2>/dev/null)
	if [[ "$State_plist" == "" ]]; then
		echo -e "-A Jamf Connect State list was not found because no user is logged into Menu Bar\n" >> $results; 
	else cp $HOME/Library/Preferences/com.jamf.connect.state.plist "$connect/com.jamf.connect.state.plist" | plutil -convert xml1 $connect/com.jamf.connect.state.plist
	fi
	
	#CHECK FOR JAMF CONNECT MENU BAR PLIST, THEN COPY AND CONVERT TO A READABLE FORMAT
	if [ -e /Library/Managed\ Preferences/com.jamf.connect.plist ]; then cp "/Library/Managed Preferences/com.jamf.connect.plist" "$connect/com.jamf.connect_managed.plist" | plutil -convert xml1 "$connect/com.jamf.connect_managed.plist" | log show --style compact --predicate 'subsystem == "com.jamf.connect"' --debug > "$connect/com.jamf.connect.log"
	else
		echo -e "Jamf Connect plist not found\n" >> $results
	fi
	
	#LIST AUTHCHANGER SETTIGNS
	if [ -e /usr/local/bin/authchanger ]; then
		/usr/local/bin/authchanger -print > "$connect/authchanger_manuallyCollected.txt"
		echo -e "-Authchanger changes the authentication database for MacOS.\nMore info can be found at this URL:\nhttps://learn.jamf.com/bundle/jamf-connect-documentation-current/page/authchanger.html\nReview the authchanger_manuallyCollected.txt file to see your settings and determine if Authchanger needs to be modified for your environment.\n" >> $results;
	else
		echo -e "-No Authchanger settings found\n" >> $results
	fi
}
####################################################################################################
#Array for Jamf Protect Logs
Protect() {
	#MAKE DIRECTORY FOR ALL JAMF SECURITY RELATED FILES
	mkdir -p $log_folder/Jamf_Security
	#CHECK FOR JAMF PROTECT PLIST, THEN COPY AND CONVERT TO READABLE FORMAT
	if [ -e /Library/Managed\ Preferences/com.jamf.protect.plist ]; then cp "/Library/Managed Preferences/com.jamf.protect.plist" "$security/com.jamf.protect.plist"
		plutil -convert xml1 "$security/com.jamf.protect.plist"
		protectctl info > $security/jamfprotectinfo.log
		protectctl version > $security/jamfprotectinfo.log
	else
		echo -e "Jamf Protect plist not found\n" >> $results
	fi
	#CHECK FOR JAMF TRUST PLIST, THEN COPY AND CONVERT TO READABLE FORMAT
	if [ -e /Library/Managed\ Preferences/com.jamf.trust.plist ]; then cp "/Library/Managed Preferences/com.jamf.trust.plist" "$security/com.jamf.trust.plist" 
		plutil -convert xml1 "$security/com.jamf.trust.plist"
	else
		echo -e "Jamf Trust plist not found\n" >> $results
	fi
}

####################################################################################################
#Array for Recon Troubleshoot
Recon_Troubleshoot() {
	mkdir -p $log_folder/Recon
	#check for Jamf Recon leftovers
	if [[ $reconleftovers == "" ]]; then
		echo -e "Recon Folder Empty, we love to see that!\n" >> $results
	else
		echo $reconleftovers > $recon/Leftovers.txt
		#DIAGNOSTIC INFORMATION FOR RECON RESULTS. FOLLOWING THESE STEPS WILL HELP IDENTIFY PROBLEMATIC EXTENSION ATTRIBUTES AND/OR INVENTORY CHECK IN PROBLEMS
		echo -e "\nRecon leftovers found and listed above\nTo remediate, take the following steps:\n1. Open the other files in this folder\n2.Find the Extension Attribute that matches the script in this file\n3.Remove or remediate the associate Extension Attribute Script\n4.Confirm by running a 'Sudo Jamf Recon' and verifying the files do not return.\n" >> $recon/Leftovers.txt
		#REPORT IN RESULTS FILE THAT LEFTOVERS WERE FOUND
		echo -e "\nRecon Troubleshoot found files in the /tmp directory that should not be there. A report of these files as well as next actions can be found in the Leftovers.txt file in the Recon Directory.\n" >> $results
		#copy all files in tmp folder to recon results folder
			cp -r /Library/Application\ Support/Jamf/tmp/ $recon/
	fi
}
####################################################################################################
#Array for MDM Communication Check
#IF A DEVICE IS NOT COMMUNICATING WITH MDM, THIS WILL GIVE ITEMS TO LOOK INTO
MDMCommunicationCheck() {
	#WRITE TO LOGS WHAT WE ARE DOING NEXT
	echo -e "Checking $loggedInUser's computer for MDM communication issues:" >> $results
	#CHECK MDM STATUS AND ADVISE IF IT IS COMMUNICATING
	result=$(log show --style compact --predicate '(process CONTAINS "mdmclient")' --last 1d | grep "Unable to create MDM identity")
	if [[ $result == '' ]]; then
		echo -e "-MDM is communicating" >> $results
	else
		echo -e "-MDM is broken" >> $results
	fi
	#CHECK FOR THE MDM PROFILE TO BE INSTALLED
	mdmProfile=$(/usr/libexec/mdmclient QueryInstalledProfiles | grep "00000000-0000-0000-A000-4A414D460003")
	if [[ $mdmProfile == "" ]]; then
		echo -e "-MDM Profile Not Installed" >> $results
	else
		echo -e "-MDM Profile Installed" >> $results
	fi
	#TELL THE STATUS OF THE MDM DAEMON
	mdmDaemonStatus=$(/System/Library/PrivateFrameworks/ApplePushService.framework/apsctl status | grep -A 18 com.apple.aps.mdmclient.daemon.push.production | awk -F':' '/persistent connection status/ {print $NF}' | sed 's/^ *//g')
	echo -e "-The MDM Daemon Status is:$mdmDaemonStatus" >> $results
	#WRITE THE APNS TOPIC TO THE RESULTS FILE IF IT EXISTS
	profileTopic=$(system_profiler SPConfigurationProfileDataType | grep "Topic" | awk -F '"' '{ print $2 }');
	if [ "$profileTopic" != "" ]; then
		echo -e "-APNS Topic is: $profileTopic\n" >> $results
	else
		echo -e "-No APNS Topic Found\n" >> $results
	fi
}
####################################################################################################
#Array for Managed Preferences Collection
Managed_Preferences_Array() {
	mkdir -p $log_folder/Managed_Preferences
	#CHECK FOR MANAGED PREFERENCE PLISTS, THEN COPY AND CONVERT THEM TO A READABLE FORMAT
	if [ -e /Library/Managed\ Preferences/ ]; then cp /Library/Managed\ Preferences/*.plist $managed_preferences
		echo -e "The Managed Preferences folder deploys plists that tell the referenced application what parameters to follow. If you deployed settings to an application that aren't applying, make sure the preference domain plist is deployed to this folder.Check the Managed_Preferences output for results.\n" >> $results
	else
		echo -e "No Managed Preferences plist files found\n" >> $results
	fi
	#SLEEP TO ALLOW COPY TO FINISH PROCESSING ALL FILES
	sleep 5
	
	#UNABLE TO CHECK FOLDER FOR WILDCARD PLIST LIKE *.PLIST
	#IF THIS SECTION IS NOT WORKING, FIND A COMMON PLIST THAT IS DEPLOYED FLEET WIDE LIKE A NOTIFICATION PAYLOAD OR SYSTEM EXTENSIONS AND CHANGE IT IN THE NEXT LINE
	if [ -e $managed_preferences/com.apple.TCC.configuration-profile-policy.plist ]; then plutil -convert xml1 $HOME/Desktop/Logs/managed_preferences/*.plist
	else
		echo -e "No files to convert to plist\n" >> $results
	fi
	#LIST ALL INSTALLED USER AND MACHINE PROFILES AND SAVE TO A .TXT FILE
	profiles show > $log_folder/User_Installed_Profiles.txt
	
	#REMOVE COMMENT OT SEE MACHINE PROFILES. WILL REQUIRE SUDO PRIVELIGES
	# sudo profiles show > $log_folder/User_Installed_Profiles.txt
}

####################################################################################################
#Array for Device Compliance
DeviceCompliance() {
	mkdir -p $log_folder/Device_Compliance
	log show --predicate 'subsystem CONTAINS "jamfAAD" OR subsystem BEGINSWITH "com.apple.AppSSO"' > $Device_Compliance/JamfConditionalAccess.log
	if [ -e /Library/Logs/Microsoft/Intune/ ]; then cp /Library/Logs/Microsoft/Intune/*.log $Device_Compliance
	else
		echo -e "Device Compliance system logs not found.\n" >> $results
	fi
	if [ -e /$loggedInUser/Logs/Microsoft/Intune/ ]; then cp /Library/Logs/Microsoft/Intune/*.log $Device_Compliance
	else
		echo -e "Device Compliance user logs not found.\n" >> $results
	fi
	
}

####################################################################################################
#Array for Device Compliance
Remote_Assist() {
	#ADD JAMF Remote Assist Log Folder
	if [ -e /Users/Shared/jamfdata ]; then cp -r "/Users/Shared/jamfdata" $JRA
		echo -e "Jamf Remote Assist session logs found. Copied to JSS/Remote_Assist folder\n" >> $results
		touch $JRA/JRA_Info.txt
		successfulFileDownloads=$(grep -R "File:" /Users/Shared/jamfdata/log/Connect/DragSimulator/ | awk '/Transfer Successful!/' | sed 's/^.*File://' | sed 's/Transfer Successful!//g')
		if [[ $successfulFileDownloads == "" ]]; then 
			echo "No File Transfers found from most recent session" >> $JRA/JRA_Info.txt
		else
			echo -e "The files most recently downloaded from Jamf Remote Assist are: $successfulFileDownloads" >> $JRA/JRA_Info.txt
		fi
		lastremote=$(grep -r "grapplemdm::ipc::tcp::TcpConnector::Connect(ipc::ListenerIdentifier::Ref) connected to 127.0.0.1:" /Users/Shared/jamfdata/log/Connect/ | sed 's/^.*log://' | awk '{print $1}')
		if [[ $lastremote == "" ]]; then 
			echo "No Remote Sessions have been launched by Jamf Remote Assist on this device or the logs have been manually cleared." >> $JRA/JRA_Info.txt
		else
			echo "Last Jamf Remote Assist session listed below:" >> $JRA/JRA_Info.txt
			echo ${lastremote:1} | awk '{print $1}' >> $JRA/JRA_Info.txt
		fi		
	else
		echo -e "Jamf Remote Assist logs not found. Only available on Jamf Pro 11.1.0 and up.\n" >> $results
	fi
}

####################################################################################################
#Array for App Named in Dynamic Variables
#When done, remove the associated array comment/# inside the Case command inside the logGrabberMasterArray
CustomApp1Array() {
	mkdir -p $log_folder/$CustomApp1Name
	if [ -e $CustomApp1LogSource ]; then cp $CustomApp1LogSource $CustomApp1Folder
	else
		echo -e "$CustomApp1Name does not have a log file available to grab.\n" >> $results
	fi
}

####################################################################################################
#Array for App Named in Dynamic Variables
#When done, remove the associated array comment/# inside the Case command inside the logGrabberMasterArray
CustomApp2Array() {
	mkdir -p $log_folder/$CustomApp2Name
	if [ -e $CustomApp2LogSource ]; then cp $CustomApp2LogSource $CustomApp2Folder
	else
		echo -e "$CustomApp2Name does not have a log file available to grab.\n" >> $results
	fi
}

####################################################################################################
#Array for App Named in Dynamic Variables
#When done, remove the associated array comment/# inside the Case command inside the logGrabberMasterArray
CustomApp3Array() {
	mkdir -p $log_folder/$CustomApp3Name
	if [ -e $CustomApp3LogSource ]; then cp $CustomApp3LogSource $CustomApp3Folder
	else
		echo -e "$CustomApp3Name does not have a log file available to grab.\n" >> $results
	fi
}

####################################################################################################

#Array for folder cleanup
Cleanup() {
	#IF A VARIABLE ABOVE IS SET TO 'FALSE', REMOVE THE FOLDER NAME FOR IT BELOW TO AVOID ERRORS WITH THE CLEANUP FUNCTION AT THE END OF THE SCRIPT
	cleanup=("JSS Recon Self_Service Connect Jamf_Security Managed_Preferences Device_Compliance Remote_Assist $CustomApp1Name $CustomApp2Name $CustomApp3Name")
	#CLEANS OUT EMPTY FOLDERS TO AVOID CONFUSION
	echo -e "Cleaning out empty folders from the directory...." >> $results
	for emptyfolder in $cleanup
	do	
		if [ -z "$(ls -A /$log_folder/$emptyfolder)" ]; then
			echo -e "-$emptyfolder folder is empty, removing folder" >>$results 
			rm -r $log_folder/$emptyfolder
		else
			echo -e "-$emptyfolder folder is not empty, leaving folder" >>$results
		fi
	done
	echo -e "-Finished cleaning up.\n" >> $results
	#STAMP TIME COMPLETED BEFORE ZIPPING FILES
	echo -e "Completed Log Grabber on '$currenttime'\n" >> $results
}

####################################################################################################
Zip_Folder() {
	cd $HOME/Desktop
	#NAME ZIPPED FOLDER WITH LOGGED IN USER AND TIME
	zip $HOME/Desktop/"$loggedInUser"_logs_collected_"$currentlogdate".zip -r Logs
	rm -r $log_folder
}
####################################################################################################
# Set the Arrays you want to grab.
# Default Array is logsToGrab=("Jamf" "Protect" "Connect" "Recon_Troubleshoot" "MDM_Communication_Check" "Managed_Preferences" "Device_Compliance" "Remote_Assist" "$CustomApp1Name" "$CustomApp2Name" "$CustomApp3Name")

declare -a logsToGrab=("Jamf" "Protect" "Connect" "Recon_Troubleshoot" "MDM_Communication_Check" "Managed_Preferences" "Device_Compliance" "Remote_Assist" "$CustomApp1Name" "$CustomApp2Name" "$CustomApp3Name")

####################################################################################################
# Put it all together in the Master Array

logGrabberMasterArray() {
	#CLEAR OUT PREVIOUS RESULTS
	if [ -e $log_folder ] ;then rm -r $log_folder
	fi
	#CREATE A FOLDER TO SAVE ALL LOGS
	mkdir -p $log_folder
	#CREATE A LOG FILE FOR SCRIPT AND SAVE TO LOGS DIRECTORY SO ADMINS CAN SEE WHAT LOGS WERE NOT GATHERED
	touch $results
	#SET A TIME AND DATE STAMP FOR WHEN THE LOG GRABBER WAS RAN
	echo -e "Log Grabber was started at '$currenttime'\n" >> $results
	## now loop through the above array
	for logs in "${logsToGrab[@]}"
	do
		echo "$logs"
		case $logs in
			Jamf)
				Jamf 
			;;
			Protect)
				Protect 
			;;
			Connect)
				Connect 
			;;
			Recon_Troubleshoot)
				Recon_Troubleshoot 
			;;
			MDM_Communication_Check)
				MDMCommunicationCheck 
			;;
			Managed_Preferences)
				Managed_Preferences_Array 
			;;
			Device_Compliance)
				DeviceCompliance 
			;;
			Remote_Assist)
				Remote_Assist  
			;;
			"$CustomApp1Name")
				#Add or Remove comment from line below to disable or enable the array for the custom app
				CustomApp1Array  
			;;
			"$CustomApp2Name")
				#Add or Remove comment from line below to disable or enable the array for the custom app
				#CustomApp2Array  
			;;
			"$CustomApp3Name")
				#Add or Remove comment from line below to disable or enable the array for the custom app
				#CustomApp3Array  
			;;
			*)
				echo "$logs is an invalid variable for the array. Check your spelling or add it to the case argument with your own array" >> $results
			;;
		esac
	done
	
}

#Runs the Log Grabber as configured
logGrabberMasterArray 
#Run cleanup Array to remove empty folders
Cleanup
#Zips Results- Comment out or remove the line below to leave the folder unzipped
Zip_Folder 
